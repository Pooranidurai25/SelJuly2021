Summary of Day1 session:
========================

Why java?
WORA - PlatformInDependency
IDE - netBeans, eclipse, IJ
Craete project, Package, class
Shortcuts
keywords,datatypes,variables
naming covention standards
Conditional Statements - IF
Iterative/Looping statement - for, while, do while

Summary of July-11-2021
=======================
Conditional Statements
switch case 

jumping Statements - continue, break
                   - continue --> skip that condition alone 
                   - break    --> comes out of the loop totally

class
Object - Physical  entity

1. How it looks? / property/ State  -- variables
   -- colur
   -- isFurry

2. What is it going to do? action/Behaviour -- methods
   --bark
   -- canSmell
   --canJump

Class replicate the object/ Blueprint of the object

******************************************
25.07.2021
week3 day2

Agenda :
OOPS   : Abstraction
            - Interface
            - Abstract class
COLLECTIONS: List 
             Set

***************************

OOPS Concepts:
*************

Topic: ABSTRACTION
 Abstraction is a process of hiding the implementation details 
 Showing only functionality to the user.

-- Interface ( 100% of abstraction)
-- Abstract Class (0-100 % of abstraction )

What is Interface?
- design/Plan ()


Abstract class : class without a body / no implementation
Concrete class : class with a body / implementation

1. Added Unimplemented methods inside the Interface
2. Type the Documentation (use /** - Enter)
3. Use the Keyword : implements 
4. All the unimplemnted methods of an Interface has to be 
   implemented in the implementation class 
   (ie. the class that implemnts that Interface)
5. The implementation class can have its own method in it too.
6. Object instantiation cannot be done for an Interface.
7. CLASS LEVEL MULTIPLE INHERITANCE IS NOT POSSIBLE
   INTERFACE LEVEL MULTIPLE INHERITANCE IS POSSIBLE
     ( do it with TWO INTERFACES)
8. Inheritence - extends
   A class can inherit and also implement, both at a time.


Classroom 1:

1. Design an Interface TaxCalculation with unimplemnted methods below:
  public double incomeAdd(String name, double amount1, double amount2)
  public double incomeReduce(String name, double amount1, double amount2)
  public void publishValue()

2. Design a second Interface IncomeCalculation with unimplemnted methods below:
  void calcGrossIncome();
  void removeDeductions();

3. Implentation class: CalcIndividualsTax
       Try to implement all the above learnings ( from point 1 to point 8) 

Abstract :

Classroom2:
     AbstractClass     :University
     Methods           : pg()(implemented method),
                         ug() (unimplemented method)

     Class     : College extends University
     Methods   :ug()
*****************************
class      extends     class
class      implements     Interface
Interface  extends  Interface
*****************************

Selenium examples:
*******************

WebDriver - Interface
RemoteWebDriver implements WebDriver

COLLECTIONS
----------

1. List - single dimensional
2. Set  - single dimensional
3. Map  - 2 dimensional

Array : cons
    dynamic growth of the array size is not possible

9000 bags on a day listed
array - to store 9000
 
12000 bags listed another day
Array cannot be used for this

List:
-----
1. Interface
2. cannot instantiate
3. Implmentation class : ArrayList
4. Maintains the insertion order
5. Can accept duplicates
6. syntax:


List<String> listName = new ArrayList<String>();
List<Integer> listName = new ArrayList<Integer>();

< > : Generics
Wrapper Class:
-------------
int     Integer
short   Short
boolean Boolean
char    Character
double  Double
String  String
byte    Byte
long    Long
float   Float

SET:
1. Interface
2. cannot instantiate
3. Implmentation class : 
     HashSet       : Random order of the data
     LinkedHashSet : maintains the insertion Order
     TreeSet       : ASCII order ( sorted)
4. Maintains the insertion order
5. Cannot accept duplicates
6. syntax:

method:
========
  method signature:
    access specifier + returnType + methodName + arguments(if any)

  Access specifiers:
To set access levels for classes, variables, methods, and constructors
Method level access specifiers:
-------------------------------
- public
- protected
- package ( default)
- private 

- Passing arguments - Value passed to the methods through arguments
- Returning values  - Values are used from the methods by using return statement


Access Specifier for class : public and package


Instance Variables and Instance Methods :
Accessed only thr objects
So, create an instance and call these components

ClassRoom:
==========
- Create package name as week1.day2
- Create a  new class as "Mobile" under week2.day1
- Create 2 public methods (makeCall() , sendMsg()) with simple print statement
- Create a private method payBills() with simple print statement
- Create main method

- Create object for Mobile class and call the methods using the object
- Execute the class and get the result in console


- Create a new class as MyKid in week2.day1 package
- Create an object for the previous class "Mobile"
- Try to access all the 3 methods of class "Mobile"

ARRAY:
-----
- An array is a collection of similar type of elements which has contiguous memory location-
- We can store only a fixed set of elements in a Java array.
- Array in Java is index-based

Size Limit: We can store only the fixed size of elements in the array. 
            It doesn't grow its size at runtime.
            To solve this problem, collection framework is used in Java which grows automatically.
- length of an array

- Access through - for loop and for each

Printing an array in reverse order:
Sort the array
Print in reverse oeder using for loop

Class room:
==========
1. Create an character array 
2. Print the length of the array
3. Print all the elemnts of the array ( use for and for each loop)
4. Print all the elemnts of the array in reverse order ( use for and for each loop)

To print the last element of the array

Exception: ArrayIndexOutOfBoundsException


STRINGS:
=======

1. Length
2. charAt()
3. indexOf()
4. lastIndexOf()
5. toCharArray()
6. split()




( Yet to be done)
7. replace
8. replace integers, non integers
str.replaceAll("[\\d]", ""); - non integers
str.replaceAll("[\\D]", ""); - integers
9. .equals
9. toLowerCase
10. toUpperCase
11. startsWith()
12. endsWith()

============================================================================================
week2 Day1: 
17-07-2021
==========

RoadMap of Todays class
-----------------------

1. Selenium Introduction
Stable version
Alpha version
Beta version

2. How to set up your work environment?
	Open a Maven Project
	Update with the dependencies required in pom.xml(Project Object Model or POM is the fundamental unit of work in Maven)
        Maven dependendences in your local repository --> .m2
	Force update in case pom.xml throws an error.
	How to take a code for system explorer?
3. System.setProperty()
   WebDriverManager ( importance of WebDriverManager)

		READY TO CODE!!!!

3. Launch a website and interact with the webElements
	A brief look up on the HTML and its elements
	LOCATORS ( 8 Locators)

4. Sample webApplication to implement all the above

	URL: http://leaftaps.com/opentaps/control/main
	Username : demosalesmanager
	Password : crmsfa


How do Selenium locate the web elemnet?
Step 1:
1. Right Click --> Inspect --> developer Tool
2. Press F12 --> developer Tool
3. When Right click is disabled,
       More tools --> developer Tool ( cntrl + shift + I)
       Press F12

Step 2:
Analyse the DOM ( Document Object Model)
HTML Tags:
========

<tags>
<html>   - root tag
<a>      - anchor - hyperlink
<button> - button
<input>  - user can give an input
<div>    - divider tag ( divides the whoilw web page into divisions)
<span>   - similar to div tag
<h1>,<h2>- header 
<title>  - holds the title of that current window
<iframe> - inline frames
<img>    - holds the images
<table>  - Represents the table
<tr>     - table row
<td>     - table column

Structure of HTML element:
=========================
1. Tag        - ( Mandatory)( pink)
2. Attributes - ( Orange)class, id, value, name etc
3. Attribute values - (blue colour) Holds the values for the attributes
4. Text       - (black) Not an attribute

LOCATORS ( 8 locators)
=====================
1. id        - attribute;  Must be Unique; Should not have any autogenerated numbers in it.
                           eg. ext-gen589, ext-gen603
2. name      - attribute;  Must be Unique; Used When I cannot go for the id
3. class     - attribute;  Must be Unique; Used When I cannot go for the id, name
                           Should not have spaces in it
4. linkText  - text()

5. tagName   - <any HTML tags>
6. XPath     - used when none of the attribute can be used
7. Css Selector
8. Partial Link Text - same as text but uses a partial text

STEPS FOR LOGIN TEST CASE
*************************

// Step 1: Download and set the path 
// Step 2: Launch the chromebrowser
// Step 3: Load the URL
// Step 4: Maximise the window
// Step 5: Locate the username and type "demosalesmanager"
// Step 6: Locate the password and type "crmsfa"
// Step 7: Locate the Login button and click it
// Step 8: Verify if the login process is successful
// Step 9: Click CRM/SFA link


STEPS FOR CREATE LEAD TEST CASE
*******************************
// Step 1: Download and set the path 
// Step 2: Launch the chromebrowser
// Step 3: Load the URL
// Step 4: Maximise the window
// Step 5: Locate the username and type "demosalesmanager"
// Step 6: Locate the password and type "crmsfa"
// Step 7: Locate the Login button and click it
// Step 8: Verify if the login process is successful
// Step 9: Click CRM/SFA link

// Step10: Click Leads tab 
// Step11: Click CreateLead
// Step12: Enter Company name
// Step13: Enter FirstName
// Step14: Enter LastName
// Step15: Click CreateLead button

week2 Day2: 
18-07-2021
==========
Topic 1:
--------
1. Maxixmise
2. ImplicitlyWait( yet to be covered)
driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);

Topic 2:
--------
DropDown: Demo
http://www.leafground.com/pages/Dropdown.html (first three options)

How to select a value in dropdown list?
-----------------------------------------
1. selectByVisibleText: selectByVisibleText(String arg0): void
2. selectByIndex: selectByIndex(int arg0) : void
3. selectByValue: selectByValue(String arg0) : void
4. getOptions().size()

Exception:
NoSuchValueException

Class room 1 
------------
Implement Dropdowns on the following fields of Create Lead:

Source - selectByValue()
Marketing Campaign - selectByVisibleText()
Industry - selectByIndex()
Preferred Currency - selectByValue()
Ownership - selectUsingVisibleText()
State/Province - selectByIndex()
Country - selectByVisibleText()


Topic 3:
--------
Xpath

When to use the Xpath?
When I donot have any locators ( id, name,class...) to locate the web element

Xpath doesnot have zero based index
Index start with 1


Types of XPath:
***************

A. Absolute Xpath:
===================
Xpath of username field in login page:
/html/body/div[2]/div/div/form/p/input

It contains the complete path from the Root Element to the desired element.

- not a preffered choice
- Unreliable because a small change in the UI, can change the absolute Xpath  


B. Relative Xpath: (13 types of Xpath)
==================
We start from a reference element and reach the particular element
Selenium by default chooses the first result out of multiple results
Xpath of username field in login page:
(eg)//input


1. Attribute Based XPath:
   ---------------------
Syntax:
//tagname[@attribute='attributeValue']

//input[@id='username']
//input[@class='inputLogin']
//input[@type='password']

2. Text Based Xpath:
   ----------------
Syntax:
//tagname[text()='text value in DOM']

//label[text()='Username']
//h2[text()='Leaftaps Login']

3. Partial Match Xpath:
=======================

a) Partial Text Based Xpath:
---------------------------
Syntax:
//tagname[contains(text(),'Partial text in my DOM')]
//h2[contains(text(),'Leaftaps')]

a) Partial attribute Based Xpath:
---------------------------------
//tagname[contains(@attribute,'Partial value of the attribute')]

//input[@type='password']
//input[contains(@type,'pass')]

4. Collections Based Xpath:
===========================

Syntax:
(Any valid relative Xpath)[index]
(Xpath)[index]

(//input[@class='inputLogin'])[2]


5. Advanced Xpath/ RelationShip based Xpath/ Axes based Xpath
=============================================================

8 types and its syntax:
-----------------------

1	Parent To child                 : parent xpath/tagName of child
2	GrandParent to child Relation   : GrandParent xpath//tagName of grand child
3	Child to parent                 : child xpath/parent::parent tagName
4	GrandChild to Grand parent      : GrandChild xpath/ancestor::tagName of grand parent
5	Elder Sibling toYounger Sibling : Elder sibling xpath/following-sibling::tagName of younger sibling
6	Younger Sibling to elder Sibling: Younger sibling xpath/preceding-sibling::tagName of Elder sibling
7	Elder cousin to Younger cousin  : Elder cousing xpath/following::tagName of younger Cousin
8	Younger cousin to Elder cousin  : Younger cousin xpath/preceding::tagName of Elder cousin


13 types of Xpath


****************************************************************
24.07.2021
week3 day1
OOPS Concepts:

Topic: INHERTANCE

Inheritance in Java
-------------------
Classroom 1:
Create 3 classes 
- Mobile (methods: sendMsg(),makeCall(),saveContact() 
- AndroidPhone (method: takeVideo)
- SmartPhone (method: connectWhatsApp)

Note:
- AndroidPhone extends Mobile (Single Level Inheritance)
- SmartPhone extends AndroidPhone ( Multilevel Inheritance)

Execution class:
- Create a class named MyPhone for execution ( must have a main method)
- First, Create an object for AndroidPhone and see what all methods can be accessed ( Single Level Inheritance)
- Then, Create object for SmartPhone class and see if you can call all the methods using this object ( Multilevel Inheritance)

Inheritance in Selenium
-----------------------
ChromiumDriver extends RemoteWebDriver				
ChromeDriver extends ChromiumDriver				
EdgeDriver extends ChromiumDriver				
SafariDriver extends RemoteWebDriver				
FireFoxDriver extends RemoteWebDriver				


POLYMORPHISM:
------------
Many forms of same entity


1. methodOverRiding/Dynamic binding/RunTime Polymorphism
2. methodOverloading/Static binding/compileTime polymorphism

1.methodOverRiding:

Audi - changeGear()- override

2. methodOverloading/Static binding/compileTime polymorphism:

Same name - different arguments/ diff num of args

we can implement method overloading in two different ways:
implementing two or more methods that have the same name but take different numbers of arguments
implementing two or more methods that have the same name but take arguments of different types

thod Overriding*
In the Classroom 1, 
 - Create the same method(takeVideo) in the SmartPhone class ( This is the same as in AndroidPhone class) 
*(Here you are overriding the parent method)*
 - Execute takeVideo() method using ChildClass object
 - Ensure from which class the takeVideo() is executed.


Classroom 3:
*Method Overloading*
Create class Calculator with below methods

- 2 methods for add, 1 method with 2 int args , 1 method with 3 int args
- 2 methods for multiply, 1 method with 2 int args, 1method with 1 int and 1 double args
- 2 methods for subtract, 1 method with 2 int args , 1 method with 2 double args
- 2 methods to divide , 1 method with 2 int args, 1 method with one double number and one int

create object for the Calculator class and execute all the methods

*****************************************************************************************************************************

Week4 Day1: 31/07/2021
AGENDA:

1. IMPLICITLY WAIT
2. Alerts
3. Frames
4. WindowHandling
5. TakeScreenShot


By implicitly waiting, 
   WebDriver polls the DOM for a certain duration when trying to find any element. 
   This can be useful when certain elements on the webpage are not available immediately and need some time to load.
   The default setting is 0, meaning disabled. Once set, the implicit wait is set for the life of the session.

findElement()
findElements()


       alpha 6:  driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);

       alpha 7:  driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));


ALERT:

What is an Alert?
-- POPUP dialog box
warning, message, ask me a small confirmation
(egs)
1. simple Alert : Axis retail banking (Right click)
2. Sweet Alert : 

Types:
1. Window based popup
    --> gmail--> compose--> attachment--> dialog box pops up
    --> ROBOT class

2. Web based pop up:

Types:
1. Modal dialog

****************
  -- We cannot inspect the alert( cannot right-click)
       (Because alerts are written in DOM using javaScript ( not HTML))
  -- We cannot interact with the main page, untill the alert is handled

Types of Modal dialog:
---------------------
1. Simple alert        --  OK            void accept(); 
2. Confirmation Alert  -- Ok, Cancel -   void dismiss(); 
3. Prompt Alert        -- textBox,-  void sendKeys(String keysToSend);
                          Ok, cancel
                       -- String getText() 
                          - To get the text from the alert box
How do handle an alert?
-----------------------
-- try to inspect : findElement() - can this be used? NO
-- javaScript Alert and not found in DOM

-- Handle using the Interface -- Alert
   Implementation class of Alert interface --> RemoteAlert, EventFiringAlert

Ok                   --> accept()  --> return - void  (Positive actions)
cancel               --> dismiss()--> return - void   (Negative actions)
To enter the text    --> sendKeys()--> return - void
To get the text(msg) --> getText() --> returns String


ALERT EXCEPTIONS:
----------------
1)
// Throws org.openqa.selenium.NoAlertPresentException
   Occurs when trying to interact with the alert that is not active curently

2)
// org.openqa.selenium.UnhandledAlertException
   Occurs when Alert is still alive and	
       I try to access the main window

can a page has multiple alerrts?

ex:- AJIO Application
     alert is not comming same page
       --- while landing page
       --- while search item

2. Non-Modal Dialog:(sweet Alert)
*********************************

egs: IRCTC, tatcliq

https://www.tatacliq.com/
      https://www.irctc.co.in/nget/train-search

// Handled as a normal webElement
// Can write Xpath
// Can use findElement()


*************************************
ClassRoom for Alerts in LeafGrounds : 
  First two cases alone
**************************************


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

FRAMES:

-- DOM inside a DOM

How to identify a Frame is present?
1. look for iframes ot frames tag in your DOM
2. Inspect the element

How does it appear in DOM?


1. <iframe> -- inline frame (floating frame)
2. <frame>  -- static frame/immovable

http://www.leafground.com/pages/frame.html

What if my element is inside a frame and try to access it without enetering the frame?

ClickMe -- first option
Throws Exception: NoSuchElementException
             

// How to access the frame?

1. Select my frame through index
2. Select my frame attribute -- id/name
3. Select my frame as normal as a webelement (Xpath)	


RETURNING THE CONROL TO THE PREVIOUS LEVELS :
DefaultContent -- Frame2 control to main DOM  (Top of the DOM)
parentFrame    -- Frame2 to Frame1 ( One level higher)

To think:

In case 3, to find the number of frames, it returns 3. 
But in the DOM, it gives 7 when searched. 
WHY?

EXCEPTIONS OF FRAMES:

NoSuchFrameException
     (NoSuchElementException) - element is loaded in the DOM. But not visible
    

ClassRoom for Alerts and Frames:
--------------------------------

https://www.w3schools.com/js/tryit.asp?filename=tryjs_confirm
Click Try It Button
Click OK/Cancel in the alert
Confirm the action is performed correctly by verifying the text !!
 Hint



Switch to the frame
Then click Try It with xpath
Switch to the alert
Then perform accept / dismiss
Get the text using id 
Verify the text based on the action




Assignment: 
1. serviceNow
2. https://chercher.tech/practice/frames-example-selenium-webdriver


**********************************************************************************************

WINDOW HANDLING:

webelements: locators (unique)
frames : index / nameor Id/ webElement
windows :

title
URL
index
id
<a>
href

What is a window handle? 
A window handle is a unique identifier that holds the address of all the windows. 
This is basically a pointer to a window, which returns the string value. 
This window handle function helps in getting the handles of all the windows.
 It is guaranteed that each browser will have a unique window handle.


getWindowhandle(): helps in getting the window handle of the current window
getWindowhandles(): helps in getting the handles of all the windows opened

-- set

How do you confirm the order of windows

Array
  
List

Set

cant we have list directy



driver.close();   - closes the current active window
driver.quit();  - closes all the related windows

Methods needed to handle multiple windows:

Exceptions:
org.openqa.selenium.NoSuchWindowException: 
 org.openqa.selenium.NoSuchSessionException: Session ID is null. Using WebDriver after calling quit()?

Alerts and Window handling
---------------------------
1. Load https://www.irctc.co.in/
2. Click on OK button in the dialog  
3. Click on FLIGHTS link            
4. Go to the Flights tab
5. Print the customer care email id
6. Close the First tab(Train ticket booking) alone

TAKE SCREEN SHOT of the current window:
--------------------------------------

Takes the screenshot of the visible portion of the window.

	 File src1 = driver.getScreenshotAs(OutputType.FILE);
	 File dst = new File("./snaps/seat.png");
	 FileUtils.copyFile(src1, dst);
******************************************************************************************************************
























